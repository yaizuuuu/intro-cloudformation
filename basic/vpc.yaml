AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  ImageId:
    Description: AMI ID
    Type: String
    Default: ami-0ff21806645c5e492
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # -------------------------
  # VPC
  # -------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      EnableDnsSupport: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: cloudformation-prod_vpc


  # -------------------------
  # IGW
  # -------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: cloudformation-prod_igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  # -------------------------
  # RouteTable
  # -------------------------
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    # VPCにIGWがアタッチし終わらないといけないため
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_private-route-table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    # VPCにIGWがアタッチし終わらないといけないため
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_public-route-table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      # デフォルトはVPCのcidr blockのみが入る
      # 追加する場合は以下を書く
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  # -------------------------
  # Subnet pub-a
  # -------------------------
  SubnetPubA:
    Type: AWS::EC2::Subnet
    # VPCにIGWがアタッチし終わらないといけないため
    # PublicRouteを指定するでもよい？
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.0.0/21
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_pub-a
  # サブネットとルートテーブルを紐付ける
  # こういった紐付ける系の指定の仕方が多いので、
  # どういった単位で指定するのかはドキュメントを読む
  SubnetPubARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubA
      RouteTableId: !Ref PublicRouteTable
  # -------------------------
  # Subnet pub-c
  # -------------------------
  SubnetPubC:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      CidrBlock: 10.0.16.0/21
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_pub-c
  SubnetPubCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubC
      RouteTableId: !Ref PublicRouteTable


  # -------------------------
  # EC2
  # -------------------------
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      Tags:
        - Key: Name
          Value: cloudformation-prod_web-server
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetPubA
          GroupSet:
            - !Ref SshSecurityGroup
            - !Ref InternalSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo amazon-linux-extras install nginx1.12
        sudo systemctl start nginx
        sudo systemctl enable nginx


  # -------------------------
  # Security Group -> SSH
  # -------------------------
  SshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: cloudformation-prod_ssh-any
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: cloudformation-prod_ssh-any
  # -------------------------
  # Security Group -> Web
  # -------------------------
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: cloudformation-prod_web-any
      GroupDescription: Enable Web access via port 80 and 443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: cloudformation-prod_web-any
  # -------------------------
  # Security Group -> Internal
  # -------------------------
  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: cloudformation-prod_internal
      GroupDescription: Allow internal.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_internal
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InternalSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref InternalSecurityGroup
  # アウトバウンドを許可するSGを作成するデフォルトで作成されるSGが作成されなくなる
  # 今回はInternalSecurityGroupをデフォルトとしたいため、あえて追加
  # 本来は追加しなくても、アウトバウンドは全てのドラフィックが許可されている
  SecurityGroupEngress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref InternalSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0


  # -------------------------
  # ALB
  # -------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Name: web-server-target-group
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance
          Port: 80
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloudformation-prod_web-server-target-group
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: web-server-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref InternalSecurityGroup
        - !Ref WebSecurityGroup
      Subnets:
        - !Ref SubnetPubA
        - !Ref SubnetPubC
      Type: application
      Tags:
        - Key: Name
          Value: cloudformation-prod_web-server-alb
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP  # NLB では `TCP` に変更します。


#UserData:
#  # 短縮形は連続して使えないためFn::Base64(完全形) -> !Sub(短縮形)となる
#  Fn::Base64:
#    # 文字列に${}で動的な文字列を差し込める
#    !Sub |
#    #!/bin/bash -xe
#    yum update -y aws-cfn-bootstrap
#    /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets wordpress_install --region ${AWS::Region}
#    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
